# -*- coding: utf-8 -*-
"""1 Step Binomial Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pCpNhhwEeRMx98bdDRFvEg-NipdJOiQ7

**1 STEP BINOMIAL OPTION TRADING MODEL**
"""

import numpy as np

def binomial_option_1step(S0, K, T, r, sigma, option_type='call'):
    """
    1-step binomial option pricing model for European options.

    Parameters:
    - S0: Current stock price
    - K: Strike price
    - T: Time to maturity (in years)
    - r: Risk-free interest rate
    - sigma: Volatility of the stock
    - option_type: 'call' for a call option or 'put' for a put option

    Returns:
    - Option price
    """
    # Step 1: Calculate time step (1 step = T)
    Δt = T # For a 1-step model, Δt is the total time to maturity.

    # Step 2: Calculate the up and down factors
    u = np.exp(sigma * np.sqrt(Δt))  # Up factor
    d = 1 / u  # Down factor

    # Step 3: Calculate the risk-neutral probability
    p = (np.exp(r * Δt) - d) / (u - d)

    # Step 4: Calculate the stock price in the up and down scenarios
    S_up = S0 * u
    S_down = S0 * d

    # Step 5: Calculate the option payoff at maturity
    if option_type == 'call':
        # Payoff for call option
        payoff_up = max(S_up - K, 0)  # Call payoff in up scenario
        payoff_down = max(S_down - K, 0)  # Call payoff in down scenario
    elif option_type == 'put':
        # Payoff for put option
        payoff_up = max(K - S_up, 0)  # Put payoff in up scenario
        payoff_down = max(K - S_down, 0)  # Put payoff in down scenario
    else:
        raise ValueError("Invalid option type. Use 'call' or 'put'.")

    # Step 6: Discount the expected option price back to the present value
    option_price = np.exp(-r * Δt) * (p * payoff_up + (1 - p) * payoff_down)

    return option_price

# Example usage:

# Inputs
S0 = 100  # Current stock price
K = 105   # Strike price
T = 1     # Time to maturity (1 year)
r = 0.05  # Risk-free interest rate (5%)
sigma = 0.2  # Volatility (20%)

volatility_adjustment = (1 + r)**T

# Calculate call option price using 1-step binomial model
call_price = binomial_option_1step(S0, K, T, r, sigma, option_type='call')
print(f"Call Option Price (1-step Binomial): {call_price:.3f}")

# Calculate put option price using 1-step binomial model
put_price = binomial_option_1step(S0, K, T, r, sigma, option_type='put')
print(f"Put Option Price (1-step Binomial): {put_price:.3f}")



